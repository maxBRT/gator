// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id
`

// CreateFeedParams represents the parameters needed to create a new feed
// All fields are required and must be provided when creating a feed
type CreateFeedParams struct {
	ID        uuid.UUID  // Unique identifier for the feed
	CreatedAt time.Time  // Timestamp when the feed was created
	UpdatedAt time.Time  // Timestamp when the feed was last updated
	Name      string     // Display name of the feed
	Url       string     // URL where the feed can be accessed
	UserID    uuid.UUID  // ID of the user who owns this feed
}

// CreateFeed inserts a new feed into the database with the provided parameters
// Returns the created feed and any error that occurred during the operation
func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeed = `-- name: GetFeed :many
SELECT id, created_at, updated_at, name, url, user_id FROM feeds
`

// GetFeed retrieves all feeds from the database
// Returns a slice of Feed objects and any error that occurred
func (q *Queries) GetFeed(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedById = `-- name: GetFeedById :one
SELECT id, created_at, updated_at, name, url, user_id FROM feeds WHERE id = $1
`

// GetFeedById retrieves a specific feed by its ID
// Returns the feed if found, or an error if not found or if query fails
func (q *Queries) GetFeedById(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedById, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedByUrl = `-- name: GetFeedByUrl :one
SELECT id, created_at, updated_at, name, url, user_id FROM feeds WHERE url = $1
`

// GetFeedByUrl retrieves a feed by its URL
// Useful for checking if a feed with the same URL already exists
// Returns the feed if found, or an error if not found or if query fails
func (q *Queries) GetFeedByUrl(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUrl, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}
